<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bio on Anna Vicco</title>
    <link>https://nbonato.github.io/</link>
    <description>Recent content in Bio on Anna Vicco</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 May 2022 11:28:34 +0200</lastBuildDate><atom:link href="https://nbonato.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Curriculum vitae</title>
      <link>https://nbonato.github.io/cv/</link>
      <pubDate>Sun, 22 May 2022 11:24:12 +0200</pubDate>
      
      <guid>https://nbonato.github.io/cv/</guid>
      <description>This is the CV page</description>
    </item>
    
    <item>
      <title>Teaching</title>
      <link>https://nbonato.github.io/teaching/</link>
      <pubDate>Sun, 22 May 2022 11:24:06 +0200</pubDate>
      
      <guid>https://nbonato.github.io/teaching/</guid>
      <description>This is the teaching page</description>
    </item>
    
    <item>
      <title>3coSoKu and its declarative modeling</title>
      <link>https://nbonato.github.io/publications/20223cosoku/</link>
      <pubDate>Sat, 21 May 2022 23:32:40 +0200</pubDate>
      
      <guid>https://nbonato.github.io/publications/20223cosoku/</guid>
      <description>In this paper, we analyze the physical puzzle IcoSoKu, a game about placing some given triangular tiles on the faces of an icosahedron in order to fill the capacities of its vertices, and we propose its generalization called 3coSoKu, admitting an arbitrary playing field with triangular faces, arbitrary capacities and an arbitrary set of triangular tiles. First, we prove the strong NP-completeness of 3coSoKu, even when the playing field is a convex polyhedron with equilateral triangles as faces. Second, we encode 3coSoKu both in the constraint modeling language MiniZinc and in the logic programming paradigm known as Answer Set Programming and we develop a visual tool for an accessible interface to the solver. Finally, we use our encodings to verify experimentally that every initial state for IcoSoKu admits a solution.</description>
    </item>
    
    <item>
      <title>3coSoKu and its Logic Programming Modeling.</title>
      <link>https://nbonato.github.io/publications/20203cosoku/</link>
      <pubDate>Sat, 21 May 2022 23:32:40 +0200</pubDate>
      
      <guid>https://nbonato.github.io/publications/20203cosoku/</guid>
      <description>In this paper we analyze the physical puzzle IcoSoKu and we propose its generalization called 3coSoKu. We prove the NP-completeness of the latter. Then we encode it both in the constraint programming language MiniZinc and in the logic programming paradigm of Answer Set Programming. We use our encodings to experimentally prove the conjecture that every initial state for IcoSoKu admits a solution.</description>
    </item>
    
    <item>
      <title>2022linear</title>
      <link>https://nbonato.github.io/publications/2022linear/</link>
      <pubDate>Sat, 21 May 2022 23:32:20 +0200</pubDate>
      
      <guid>https://nbonato.github.io/publications/2022linear/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Labeled Direct Product Optimally Solves String Problems on Graphs</title>
      <link>https://nbonato.github.io/publications/2021labeled/</link>
      <pubDate>Sat, 21 May 2022 23:32:01 +0200</pubDate>
      
      <guid>https://nbonato.github.io/publications/2021labeled/</guid>
      <description>Suffix trees are an important data structure at the core of optimal solutions to many fundamental string problems, such as exact pattern matching, longest common substring, matching statistics, and longest repeated substring. Recent lines of research focused on extending some of these problems to vertex-labeled graphs, although using ad-hoc approaches which in some cases do not generalize to all input graphs. In the absence of a ubiquitous tool like the suffix tree for labeled graphs, we introduce the labeled direct product of two graphs as a general tool for obtaining optimal algorithms: we obtain conceptually simpler algorithms for the quadratic problems of string matching (SMLG) and longest common substring (LCSP) in labeled graphs. Our algorithms are also more efficient, since they run in time linear in the size of the labeled product graph, which may be smaller than quadratic for some inputs, and their run-time is predictable, because the size of the labeled direct product graph can be precomputed efficiently. We also solve LCSP on graphs containing cycles, which was left as an open problem by Shimohira et al. in 2011. To show the power of the labeled product graph, we also apply it to solve the matching statistics (MSP) and the longest repeated string (LRSP) problems in labeled graphs. Moreover, we show that our (worst-case quadratic) algorithms are also optimal, conditioned on the Orthogonal Vectors Hypothesis. Finally, we complete the complexity picture around LRSP by studying it on undirected graphs.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://nbonato.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 21 May 2022 18:27:21 +0200</pubDate>
      
      <guid>https://nbonato.github.io/posts/my-first-post/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor 
incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor 
aliquam nulla facilisi cras fermentum odio. A erat nam at lectus urna duis. 
Sed velit dignissim sodales ut eu sem. Lectus urna duis convallis convallis 
tellus. Diam sit amet nisl suscipit adipiscing bibendum est. Sed felis eget 
velit aliquet sagittis id consectetur. Vulputate dignissim suspendisse in est 
ante in nibh mauris cursus. Morbi quis commodo odio aenean. Mollis nunc sed id 
semper risus in hendrerit gravida rutrum.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
